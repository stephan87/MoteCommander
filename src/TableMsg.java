/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TableMsg'
 * message type.
 */

public class TableMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 23;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 3;

    /** Create a new TableMsg of size 23. */
    public TableMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TableMsg of the given data_length. */
    public TableMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TableMsg with the given data_length
     * and base offset.
     */
    public TableMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TableMsg using the given byte array
     * as backing store.
     */
    public TableMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TableMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TableMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TableMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TableMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TableMsg embedded in the given message
     * at the given base offset.
     */
    public TableMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TableMsg embedded in the given message
     * at the given base offset and length.
     */
    public TableMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TableMsg> \n";
      try {
        s += "  [seqNum=0x"+Long.toHexString(get_seqNum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sender=0x"+Long.toHexString(get_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [receiver=0x"+Long.toHexString(get_receiver())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeId=";
        for (int i = 0; i < 4; i++) {
          s += "0x"+Long.toHexString(getElement_nodeId(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lastContact=";
        for (int i = 0; i < 4; i++) {
          s += "0x"+Long.toHexString(getElement_lastContact(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parent=0x"+Long.toHexString(get_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNum
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNum' is signed (false).
     */
    public static boolean isSigned_seqNum() {
        return false;
    }

    /**
     * Return whether the field 'seqNum' is an array (false).
     */
    public static boolean isArray_seqNum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNum'
     */
    public static int offset_seqNum() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNum'
     */
    public static int offsetBits_seqNum() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'seqNum'
     */
    public int get_seqNum() {
        return (int)getUIntBEElement(offsetBits_seqNum(), 16);
    }

    /**
     * Set the value of the field 'seqNum'
     */
    public void set_seqNum(int value) {
        setUIntBEElement(offsetBits_seqNum(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNum'
     */
    public static int size_seqNum() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNum'
     */
    public static int sizeBits_seqNum() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sender
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sender' is signed (false).
     */
    public static boolean isSigned_sender() {
        return false;
    }

    /**
     * Return whether the field 'sender' is an array (false).
     */
    public static boolean isArray_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sender'
     */
    public static int offset_sender() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sender'
     */
    public static int offsetBits_sender() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'sender'
     */
    public int get_sender() {
        return (int)getUIntBEElement(offsetBits_sender(), 16);
    }

    /**
     * Set the value of the field 'sender'
     */
    public void set_sender(int value) {
        setUIntBEElement(offsetBits_sender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sender'
     */
    public static int size_sender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sender'
     */
    public static int sizeBits_sender() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: receiver
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'receiver' is signed (false).
     */
    public static boolean isSigned_receiver() {
        return false;
    }

    /**
     * Return whether the field 'receiver' is an array (false).
     */
    public static boolean isArray_receiver() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'receiver'
     */
    public static int offset_receiver() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'receiver'
     */
    public static int offsetBits_receiver() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'receiver'
     */
    public short get_receiver() {
        return (short)getUIntBEElement(offsetBits_receiver(), 8);
    }

    /**
     * Set the value of the field 'receiver'
     */
    public void set_receiver(short value) {
        setUIntBEElement(offsetBits_receiver(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'receiver'
     */
    public static int size_receiver() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'receiver'
     */
    public static int sizeBits_receiver() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeId
    //   Field type: int[], unsigned
    //   Offset (bits): 40
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeId' is signed (false).
     */
    public static boolean isSigned_nodeId() {
        return false;
    }

    /**
     * Return whether the field 'nodeId' is an array (true).
     */
    public static boolean isArray_nodeId() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeId'
     */
    public static int offset_nodeId(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeId'
     */
    public static int offsetBits_nodeId(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'nodeId' as a int[]
     */
    public int[] get_nodeId() {
        int[] tmp = new int[4];
        for (int index0 = 0; index0 < numElements_nodeId(0); index0++) {
            tmp[index0] = getElement_nodeId(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'nodeId' from the given int[]
     */
    public void set_nodeId(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_nodeId(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'nodeId'
     */
    public int getElement_nodeId(int index1) {
        return (int)getUIntBEElement(offsetBits_nodeId(index1), 16);
    }

    /**
     * Set an element of the array 'nodeId'
     */
    public void setElement_nodeId(int index1, int value) {
        setUIntBEElement(offsetBits_nodeId(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'nodeId'
     */
    public static int totalSize_nodeId() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'nodeId'
     */
    public static int totalSizeBits_nodeId() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'nodeId'
     */
    public static int elementSize_nodeId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'nodeId'
     */
    public static int elementSizeBits_nodeId() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'nodeId'
     */
    public static int numDimensions_nodeId() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'nodeId'
     */
    public static int numElements_nodeId() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'nodeId'
     * for the given dimension.
     */
    public static int numElements_nodeId(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lastContact
    //   Field type: int[], unsigned
    //   Offset (bits): 104
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lastContact' is signed (false).
     */
    public static boolean isSigned_lastContact() {
        return false;
    }

    /**
     * Return whether the field 'lastContact' is an array (true).
     */
    public static boolean isArray_lastContact() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'lastContact'
     */
    public static int offset_lastContact(int index1) {
        int offset = 104;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lastContact'
     */
    public static int offsetBits_lastContact(int index1) {
        int offset = 104;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'lastContact' as a int[]
     */
    public int[] get_lastContact() {
        int[] tmp = new int[4];
        for (int index0 = 0; index0 < numElements_lastContact(0); index0++) {
            tmp[index0] = getElement_lastContact(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'lastContact' from the given int[]
     */
    public void set_lastContact(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_lastContact(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'lastContact'
     */
    public int getElement_lastContact(int index1) {
        return (int)getUIntBEElement(offsetBits_lastContact(index1), 16);
    }

    /**
     * Set an element of the array 'lastContact'
     */
    public void setElement_lastContact(int index1, int value) {
        setUIntBEElement(offsetBits_lastContact(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'lastContact'
     */
    public static int totalSize_lastContact() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'lastContact'
     */
    public static int totalSizeBits_lastContact() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'lastContact'
     */
    public static int elementSize_lastContact() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'lastContact'
     */
    public static int elementSizeBits_lastContact() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'lastContact'
     */
    public static int numDimensions_lastContact() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'lastContact'
     */
    public static int numElements_lastContact() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'lastContact'
     * for the given dimension.
     */
    public static int numElements_lastContact(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parent
    //   Field type: int, unsigned
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parent' is signed (false).
     */
    public static boolean isSigned_parent() {
        return false;
    }

    /**
     * Return whether the field 'parent' is an array (false).
     */
    public static boolean isArray_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'parent'
     */
    public static int offset_parent() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parent'
     */
    public static int offsetBits_parent() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'parent'
     */
    public int get_parent() {
        return (int)getUIntBEElement(offsetBits_parent(), 16);
    }

    /**
     * Set the value of the field 'parent'
     */
    public void set_parent(int value) {
        setUIntBEElement(offsetBits_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'parent'
     */
    public static int size_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'parent'
     */
    public static int sizeBits_parent() {
        return 16;
    }

}
